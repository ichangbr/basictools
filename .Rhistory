freeMem <- function(objs){
stopifnot(is.vector(objs) && length(objs) > 0)
rm(list = objs)
gc()
}
a <- c("a")
freeMem(c())
is.vector(c("a","b"))
is.character(c("a","b"))
is.numeric(c("a","b"))
is.numeric(c("a",2))
is.character(c("a",2))
freeMem <- function(objs){
if(!is.vector(objs) && !is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs)
gc()
}
a <- c("a")
freeMem(c())
freeMem(a)
a <- c("a")
freeMem(a)
a <- c("a")
freeMem(a)
a <- c("b")
b <- 23
freeMem(a)
rm(a)
rm(c("b"))
rm(list = c("b"))
a <- c("b")
b <- 23
rm(list = a)
a <- c("b")
b <- 23
freeMem(a)
freeMem(C(1,2))
freeMem(C(1,2,3))
c(1,2)
a <- c(1,2)
freeMem(a)
is.character(a)
!is.vector(a) && !is.character(a)
!is.vector(a)
!is.character(a)
is.vector(a)
is.character(a)
freeMem(a)
freeMem <- function(objs, echo){
if(!is.vector(objs) && !is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs)
gc()
}
a <- c("b")
b <- 23
freeMem(a)
freeMem(c())
freeMem(c(1,2))
freeMem <- function(objs, echo){
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs)
gc()
}
freeMem(c(1,2))
is.logical(T)
is.logical(F)
freeMem(c("a"))
freeMem(c(a))
freeMem <- function(objs, echo = T){
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs)
gc()
}
rm(list=c("a"))
a <- c("b")
rm(list=a)
freeMem <- function(objs, echo = T){
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs)
gc()
}
a <- c("b")
b <- 23
freeMem(a)
freeMem <- function(objs, echo = T){
# if(!is.vector(objs)) stop("objs must be a vector")
# if(!is.character(objs)) stop("objs must be a character vector")
# if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs)
gc()
}
freeMem(objs = c("a"))
freeMem <- function(objs, echo = T){
# if(!is.vector(objs)) stop("objs must be a vector")
# if(!is.character(objs)) stop("objs must be a character vector")
# if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs, envir = .GlobalEnv)
gc()
}
a <- c("b")
b <- 23
freeMem(a)
freeMem <- function(objs, echo = T){
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs, envir = .GlobalEnv)
gc()
}
a <- c("b")
b <- 23
freeMem(a)
length(T)
freeMem <- function(objs, echo = T){
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
if(!is.logical(echo) | !length(echo) == 1) stop("objs must be logical value")
rm(list = objs, envir = .GlobalEnv)
if(echo) invisible(gc()) else gc()
}
b <- 23
freeMem(objs = c("a", "b"), echo = c("T", "F"))
freeMem(objs = c("a", "b"), echo = T)
freeMem <- function(objs, echo = T){
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
if(!is.logical(echo) | !length(echo) == 1) stop("objs must be logical value")
rm(list = objs, envir = .GlobalEnv)
if(!echo) invisible(gc()) else gc()
}
freeMem(objs = c("a", "b"))
a <- c("b")
b <- 23
freeMem(objs = c("a", "b"))
freeMem <- function(objs, echo = F){
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
if(!is.logical(echo) | !length(echo) == 1) stop("objs must be logical value")
rm(list = objs, envir = .GlobalEnv)
if(!echo) invisible(gc()) else gc()
}
a <- c("b")
b <- 23
freeMem(c("a", "b"))
