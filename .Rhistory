is.infinite(x)
is.infinite(mat)
is.infinite(as.data.frame(mat))
apply(as.data.frame(mat),2, function(x) {x[is.infinite(x)] <- NA; return(x)})
apply(tibble::as_tibble(mat),2, function(x) {x[is.infinite(x)] <- NA; return(x)})
names(mat)
name(mat) <- letters[1:6]
names(mat) <- letters[1:6]
mat
mat <- matrix(1:24, nrow = 4)
mat[1,2] <- -Inf
mat[2,3] <- -Inf
mat[4,6] <- -Inf
mat
colnames(mat)
colnames(mat) <- letters[1:6]
mat
apply(tibble::as_tibble(mat),2, function(x) {x[is.infinite(x)] <- NA; return(x)})
subsInf <- function(x, replace_with = NA) {
return(
apply(x,2,function(x) {x[is.infinite(x)] <- replace_with; return(x)})
)
}
subsInf(mat, 100)
subsInf(matrix(c(1, 2, -Inf, 4, 5, 6, Inf, Inf, 9), nrow = 3), replace_with = -999)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
search()
a <- search()
class(a)
grep("^packages:". a)
grep("^packages:", a)
grep("^packages:", "packages:base")
grep("^packages:", a)
grep("^package:", a)
a[grep("^package:", a)]
gsub("^package:", "", a[grep("^package:", a)])
library(basictools)
gsub("^package:", "", a[grep("^package:", a)])
search()
sprintf("%s",a)
sprintf("%s, %s",a)
sprintf("%s, %s",a, a)
paste(a)
gsub("^package:", "", a[grep("^package:", a)])
prov <- gsub("^package:", "", a[grep("^package:", a)])
prov
search()
detach("basictools")
detach("basictools", unload = T)
detach("basictools", unload = T, character.only = T)
detach("package:basictools", unload = T, character.only = T)
search()
prov <- a[grep("^package:", a)]
prov
paste(prov)
paste(prov, collapse = ", ")
paste("c(",paste(prov, collapse = ", "),")", sep = "")
print(paste("c(",paste(prov, collapse = ", "),")", sep = ""))
print(paste("c(",paste(prov, collapse = '", '),")", sep = ""))
print(paste("c(",paste(prov, collapse = '\", '),")", sep = ""))
print(paste("c(",paste(prov, collapse = ", "),")", sep = ""))
print(paste("c(",paste(prov, collapse = "', "),")", sep = ""))
print(paste("c('",paste(prov, collapse = "', "),"')", sep = ""))
print(paste("c('",paste(prov, collapse = "', '"),"')", sep = ""))
loadedNamespaces()
loaded <- search()
loaded
pckgs <- loaded[grep("^package:", loaded),]
pckgs <- loaded[grep("^package:", loaded)]
pckgs
keep <- c('package:stats', 'package:graphics', 'package:grDevices', 'package:utils', 'package:datasets', 'package:methods', 'package:base')
setdiff(pckgs,keep)
library(basictools)
keep <- c('package:stats', 'package:graphics', 'package:grDevices', 'package:utils', 'package:datasets', 'package:methods', 'package:base')
loaded <- search()
pckgs <- loaded[grep("^package:", loaded)]
setdiff(pckgs, keep)
setdiff(keep, pckgs)
setdiff(pckgs,keep)
pckgs2rem <- setdiff(pckgs, keep)
pckgs2rem
sapply(pckgs2rem, detach)
pckgs2rem
for (pkg in pckgs2rem) {
detach(pkg, character.only = T, unload = T)
}
search()
library(basictools)
base <- c('package:stats', 'package:graphics', 'package:grDevices', 'package:utils', 'package:datasets', 'package:methods', 'package:base')
loaded <- search()
pckgs <- loaded[grep("^package:", loaded)]
pckgs2rem <- setdiff(pckgs, keep)
pckgs2rem <- setdiff(pckgs, base)
pckgs2rem
paste0("package:", c("basictools", "ggplot2"))
library(ggplot2)
clearLibs <- function(keep = NULL) {
base <- c('package:stats', 'package:graphics', 'package:grDevices', 'package:utils', 'package:datasets', 'package:methods', 'package:base')
loaded <- search()
pckgs <- loaded[grep("^package:", loaded)]
if (!is.null(keep)) {
if (!is.character(keep)) stop("keep must be character")
keep <- paste0("package:", keep)
pckgs <- setdiff(pckgs, keep)
}
pckgs2rem <- setdiff(pckgs, base)
print(pckgs2rem)
# for (pkg in pckgs2rem) {
#   detach(pkg, character.only = T, unload = T)
# }
}
clearLibs(c("basictools"))
clearLibs <- function(keep = NULL) {
base <- c('package:stats', 'package:graphics', 'package:grDevices', 'package:utils', 'package:datasets', 'package:methods', 'package:base')
loaded <- search()
pckgs <- loaded[grep("^package:", loaded)]
if (!is.null(keep)) {
if (!is.character(keep)) stop("keep must be character")
keep <- paste0("package:", keep)
pckgs <- setdiff(pckgs, keep)
}
pckgs2rem <- setdiff(pckgs, base)
for (pkg in pckgs2rem) {
detach(pkg, character.only = T, unload = T)
}
}
clearLibs <- function(keep = NULL) {
base <- c('package:stats', 'package:graphics', 'package:grDevices', 'package:utils', 'package:datasets', 'package:methods', 'package:base')
loaded <- search()
pckgs <- loaded[grep("^package:", loaded)]
if (!is.null(keep)) {
if (!is.character(keep)) stop("keep must be character")
keep <- paste0("package:", keep)
pckgs <- setdiff(pckgs, keep)
}
pckgs2rem <- setdiff(pckgs, base)
print(pckgs2rem)
# for (pkg in pckgs2rem) {
#   detach(pkg, character.only = T, unload = T)
# }
}
clearLibs(c(1))
clearLibs("basictools")
clearLibs <- function(keep = NULL) {
base <- c('package:stats', 'package:graphics', 'package:grDevices', 'package:utils', 'package:datasets', 'package:methods', 'package:base')
loaded <- search()
pckgs <- loaded[grep("^package:", loaded)]
if (!is.null(keep)) {
if (!all(keep %in% pckgs)) stop("element of keep not attached")
if (!is.character(keep)) stop("keep must be character")
keep <- paste0("package:", keep)
pckgs <- setdiff(pckgs, keep)
}
pckgs2rem <- setdiff(pckgs, base)
print(pckgs2rem)
# for (pkg in pckgs2rem) {
#   detach(pkg, character.only = T, unload = T)
# }
}
clearLibs("bastools")
clearLibs(c("bastools", "ggplot2"))
clearLibs(c("basictools", "ggplot2"))
clearLibs <- function(keep = NULL) {
base <- c('package:stats', 'package:graphics', 'package:grDevices', 'package:utils', 'package:datasets', 'package:methods', 'package:base')
loaded <- search()
pckgs <- loaded[grep("^package:", loaded)]
if (!is.null(keep)) {
if (!is.character(keep)) stop("keep must be character")
keep <- paste0("package:", keep)
if (!all(keep %in% pckgs)) stop("element of keep not attached")
pckgs <- setdiff(pckgs, keep)
}
pckgs2rem <- setdiff(pckgs, base)
print(pckgs2rem)
# for (pkg in pckgs2rem) {
#   detach(pkg, character.only = T, unload = T)
# }
}
clearLibs(c("basictools", "ggplot2"))
clearLibs(c("bastools", "ggplot2"))
clearLibs(c("basictools", "ggplot2"))
clearLibs(c("basictools"))
clearLibs <- function(vect = NULL) {
base <- c('package:stats', 'package:graphics', 'package:grDevices', 'package:utils', 'package:datasets', 'package:methods', 'package:base')
loaded <- search()
pckgs <- loaded[grep("^package:", loaded)]
if (!is.null(keep)) {
if (!is.character(keep)) stop("keep must be character")
keep <- paste0("package:", keep)
if (!all(keep %in% pckgs)) stop("element of keep not attached")
pckgs <- setdiff(pckgs, keep)
}
pckgs2rem <- setdiff(pckgs, base)
print(pckgs2rem)
for (pkg in pckgs2rem) {
detach(pkg, character.only = T, unload = T)
}
}
clearLibs(c("basictools"))
clearLibs(c("basictools"))
clearLibs <- function(vect = NULL) {
base <- c('package:stats', 'package:graphics', 'package:grDevices', 'package:utils', 'package:datasets', 'package:methods', 'package:base')
loaded <- search()
pckgs <- loaded[grep("^package:", loaded)]
if (!is.null(vect)) {
if (!is.character(vect)) stop("vect must be character")
vect <- paste0("package:", vect)
if (!all(vect %in% pckgs)) stop("element of vect not attached")
pckgs <- setdiff(pckgs, vect)
}
pckgs2rem <- setdiff(pckgs, base)
print(pckgs2rem)
for (pkg in pckgs2rem) {
detach(pkg, character.only = T, unload = T)
}
}
clearLibs(c("basictools"))
search()
library(ggplot2)
clearLibs(c("basictools"))
a <- c("hola", "ignacio")
patt <- "{1} soy {2}"
print(pat)
print(patt)
gregexpr("\\{(\\d+)\\}", patt)
regmatches(patt, gregexpr("\\{(\\d+)\\}", patt))
regmatches(patt, gregexpr("(?<=\\{).(?=\\})", patt))
regmatches(patt, gregexpr("(?<=\\{).+(?=\\})", patt))
gregexpr("(?<=\\{).+(?=\\})", patt)
gregexpr("(?<=\{).+?(?=\})", patt)
gregexpr("(?<=\\{).+?(?=\\})", patt)
gregexpr("\\{.+?\\}", patt)
gregexpr("(?<=\\{).+?(?=\\})", patt, perl = T)
regmatches(patt, gregexpr("(?<=\\{).+(?=\\})", patt, perl = T))
regmatches(patt, gregexpr("(?<=\\{).+?(?=\\})", patt, perl = T))
patt = "{1}, soy {3} {2}"
regmatches(patt, gregexpr("(?<=\\{).+?(?=\\})", patt, perl = T))
regmatches(patt, gregexpr("(?<=\\{).+?(?=\\})", patt, perl = T))[[1]]
as.numeric(regmatches(patt, gregexpr("(?<=\\{).+?(?=\\})", patt, perl = T))[[1]])
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(patt, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
print(idxs)
}
fstring("{2} soy {1}")
fstring("{2} soy {1}", c(1))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
print(idxs)
}
fstring("{2} soy {1}", c(1))
fstring("{2} soy {1} {3}", c(1))
sapply(c(2,1,3), print)
fstring("{2} soy {1}", c(1))
fstring("{2} soy {1} {3}", c(1))
fstring <- function(pat, vect) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
}
fstring("{2} soy {1} {3}", c(1))
print(idxs)
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
}
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
print(idxs)
}
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
print(paste0("{",vect[i],"}"))
}
}
fstring("{2} soy {1} {3}", c("Ignacio", "Hola", "Chang"))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
print(paste0("{",i,"}"))
}
}
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
print(paste0("{",i,"}"))
}
}
fstring("{2} soy {1} {3}", c(1))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
a <- paste0("{",i,"}")
pat <- gsub(a, vect[i], pat)
print(pat)
}
}
fstring("{2} soy {1} {3}", c(1))
gsub("{2}","hola","{2}, soy")
gsub("\\{2\\}","hola","{2}, soy")
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
a <- paste0("\\{",i,"\\}")
pat <- gsub(a, vect[i], pat)
print(pat)
}
}
fstring("{2} soy {1} {3}", c(1))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
a <- paste0("\\{",i,"\\}")
print(pat)
# pat <- gsub(a, vect[i], pat)
# print(pat)
}
}
fstring("{2} soy {1} {3}", c(1))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
a <- paste0("\\{",i,"\\}")
print(a)
# pat <- gsub()
# print(pat)
}
}
fstring("{2} soy {1} {3}", c(1))
fstring("{2} soy {1} {3}", c("Ignacio", "hola", "Chang"))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
a <- paste0("\\{",i,"\\}")
pat <- gsub(a, vect[i], pat)
print(pat)
}
}
fstring("{2} soy {1} {3}", c("Ignacio", "hola", "Chang"))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
print(pat)
}
fstring("{2} soy {1} {3}", c("Ignacio", "hola", "Chang"))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
return(
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
)
}
fstring("{2} soy {1} {3}", c("Ignacio", "hola", "Chang"))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
return(
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
)
}
fstring("{2} soy {1} {3}", c("Ignacio", "hola", "Chang"))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
return(
pat
)
}
fstring("{2} soy {1} {3}", c("Ignacio", "hola", "Chang"))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
return(pat)
}
fstring("{2} soy {1} {3}", c("Ignacio", "hola", "Chang"))
x <- 1
prov <- function() {
print(x)
}
prov
prov()
get("x")
a <- "hola"
b <- 23
c <- "Ignacio"
fstring <- function(pat, vect = NULL) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
if (!is.null(vect)) {
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
}
return(pat)
}
fstring("{a}, soy {c} y tengo {b} años")
prov <- fucntion() {
prov <- function() {
get(a)
}
prov()
prov <- function() {
get("a")
}
prov()
fstring <- function(pat, vect = NULL) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
if (!is.null(vect)) {
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
print(idxs)
}
return(pat)
}
fstring("{a}, soy {c} y tengo {b} años")
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
print(idxs)
}
# return(pat)
}
fstring("{a}, soy {c} y tengo {b} años")
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
}
# return(pat)
}
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
}
return(pat)
}
fstring("{a}, soy {c} y tengo {b} años")
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
}
return(pat)
}
fstring("{a}, soy {c} y tengo {b} años")
nombre <- "Ignacio Chang"
edad <- 23
fstring("Hola, soy {nombre} y tengo {edad} años")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
data.frame(a = rnorm(20))
data.frame(a = rnorm(20), b = 1:20)
data.frame(a = rnorm(20), b = 1:20, 60:80)
data.frame(a = rnorm(20), b = 1:20, 61:80)
data.frame(a = rnorm(20), b = 1:20, c = 61:80)
df <- data.frame(a = rnorm(20), b = 1:20, c = 61:80)
rownames(df)
"row"+1:20
paste0("row_"+1:20)
paste0("row_",1:20)
rownames(df) <- paste0("row_",1:20)
df
names2cols <- function(df) {
nms <- rownames(df)
return(nms)
}
names2cols(df)
View(names2cols)
rm(names2cols)
gc
gc()
names2col <- function(df) {
nms <- rownames(df)
return(nms)
}
names2col <- function(df) {
prv <- df
prv$rnames <- rownames(prv)
return(prv)
}
names2cols(df)
names2col(df)
names2col <- function(df) {
prv <- df
rnames <- data.frame(rnames = rownames(prv))
return(prv)
}
names2col <- function(df) {
prv <- df
rnames <- data.frame(rnames = rownames(prv))
prv <- cbind(rnames, prv)
return(prv)
}
names2col(df)
names2col <- function(df) {
prv <- df
rnames <- data.frame(rnames = rownames(prv))
prv <- cbind(rnames, prv)
rownames(prv) <- NULL
return(prv)
}
names2col(df)
