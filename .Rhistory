if (!all(keep %in% pckgs)) stop("element of keep not attached")
pckgs <- setdiff(pckgs, keep)
}
pckgs2rem <- setdiff(pckgs, base)
print(pckgs2rem)
for (pkg in pckgs2rem) {
detach(pkg, character.only = T, unload = T)
}
}
clearLibs(c("basictools"))
clearLibs(c("basictools"))
clearLibs <- function(vect = NULL) {
base <- c('package:stats', 'package:graphics', 'package:grDevices', 'package:utils', 'package:datasets', 'package:methods', 'package:base')
loaded <- search()
pckgs <- loaded[grep("^package:", loaded)]
if (!is.null(vect)) {
if (!is.character(vect)) stop("vect must be character")
vect <- paste0("package:", vect)
if (!all(vect %in% pckgs)) stop("element of vect not attached")
pckgs <- setdiff(pckgs, vect)
}
pckgs2rem <- setdiff(pckgs, base)
print(pckgs2rem)
for (pkg in pckgs2rem) {
detach(pkg, character.only = T, unload = T)
}
}
clearLibs(c("basictools"))
search()
library(ggplot2)
clearLibs(c("basictools"))
a <- c("hola", "ignacio")
patt <- "{1} soy {2}"
print(pat)
print(patt)
gregexpr("\\{(\\d+)\\}", patt)
regmatches(patt, gregexpr("\\{(\\d+)\\}", patt))
regmatches(patt, gregexpr("(?<=\\{).(?=\\})", patt))
regmatches(patt, gregexpr("(?<=\\{).+(?=\\})", patt))
gregexpr("(?<=\\{).+(?=\\})", patt)
gregexpr("(?<=\{).+?(?=\})", patt)
gregexpr("(?<=\\{).+?(?=\\})", patt)
gregexpr("\\{.+?\\}", patt)
gregexpr("(?<=\\{).+?(?=\\})", patt, perl = T)
regmatches(patt, gregexpr("(?<=\\{).+(?=\\})", patt, perl = T))
regmatches(patt, gregexpr("(?<=\\{).+?(?=\\})", patt, perl = T))
patt = "{1}, soy {3} {2}"
regmatches(patt, gregexpr("(?<=\\{).+?(?=\\})", patt, perl = T))
regmatches(patt, gregexpr("(?<=\\{).+?(?=\\})", patt, perl = T))[[1]]
as.numeric(regmatches(patt, gregexpr("(?<=\\{).+?(?=\\})", patt, perl = T))[[1]])
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(patt, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
print(idxs)
}
fstring("{2} soy {1}")
fstring("{2} soy {1}", c(1))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
print(idxs)
}
fstring("{2} soy {1}", c(1))
fstring("{2} soy {1} {3}", c(1))
sapply(c(2,1,3), print)
fstring("{2} soy {1}", c(1))
fstring("{2} soy {1} {3}", c(1))
fstring <- function(pat, vect) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
}
fstring("{2} soy {1} {3}", c(1))
print(idxs)
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
}
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
print(idxs)
}
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
print(paste0("{",vect[i],"}"))
}
}
fstring("{2} soy {1} {3}", c("Ignacio", "Hola", "Chang"))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
print(paste0("{",i,"}"))
}
}
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
print(paste0("{",i,"}"))
}
}
fstring("{2} soy {1} {3}", c(1))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
a <- paste0("{",i,"}")
pat <- gsub(a, vect[i], pat)
print(pat)
}
}
fstring("{2} soy {1} {3}", c(1))
gsub("{2}","hola","{2}, soy")
gsub("\\{2\\}","hola","{2}, soy")
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
a <- paste0("\\{",i,"\\}")
pat <- gsub(a, vect[i], pat)
print(pat)
}
}
fstring("{2} soy {1} {3}", c(1))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
a <- paste0("\\{",i,"\\}")
print(pat)
# pat <- gsub(a, vect[i], pat)
# print(pat)
}
}
fstring("{2} soy {1} {3}", c(1))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
a <- paste0("\\{",i,"\\}")
print(a)
# pat <- gsub()
# print(pat)
}
}
fstring("{2} soy {1} {3}", c(1))
fstring("{2} soy {1} {3}", c("Ignacio", "hola", "Chang"))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
for (i in idxs) {
a <- paste0("\\{",i,"\\}")
pat <- gsub(a, vect[i], pat)
print(pat)
}
}
fstring("{2} soy {1} {3}", c("Ignacio", "hola", "Chang"))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
print(pat)
}
fstring("{2} soy {1} {3}", c("Ignacio", "hola", "Chang"))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
return(
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
)
}
fstring("{2} soy {1} {3}", c("Ignacio", "hola", "Chang"))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
return(
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
)
}
fstring("{2} soy {1} {3}", c("Ignacio", "hola", "Chang"))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
return(
pat
)
}
fstring("{2} soy {1} {3}", c("Ignacio", "hola", "Chang"))
fstring <- function(pat, vect) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
return(pat)
}
fstring("{2} soy {1} {3}", c("Ignacio", "hola", "Chang"))
x <- 1
prov <- function() {
print(x)
}
prov
prov()
get("x")
a <- "hola"
b <- 23
c <- "Ignacio"
fstring <- function(pat, vect = NULL) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
if (!is.null(vect)) {
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
}
return(pat)
}
fstring("{a}, soy {c} y tengo {b} años")
prov <- fucntion() {
prov <- function() {
get(a)
}
prov()
prov <- function() {
get("a")
}
prov()
fstring <- function(pat, vect = NULL) {
idxs <- as.numeric(regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]])
if (!is.null(vect)) {
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
print(idxs)
}
return(pat)
}
fstring("{a}, soy {c} y tengo {b} años")
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
print(idxs)
}
# return(pat)
}
fstring("{a}, soy {c} y tengo {b} años")
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
}
# return(pat)
}
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
invisible(lapply(idxs, function(i) { pat <- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
}
return(pat)
}
fstring("{a}, soy {c} y tengo {b} años")
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
}
return(pat)
}
fstring("{a}, soy {c} y tengo {b} años")
nombre <- "Ignacio Chang"
edad <- 23
fstring("Hola, soy {nombre} y tengo {edad} años")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
data.frame(a = rnorm(20))
data.frame(a = rnorm(20), b = 1:20)
data.frame(a = rnorm(20), b = 1:20, 60:80)
data.frame(a = rnorm(20), b = 1:20, 61:80)
data.frame(a = rnorm(20), b = 1:20, c = 61:80)
df <- data.frame(a = rnorm(20), b = 1:20, c = 61:80)
rownames(df)
"row"+1:20
paste0("row_"+1:20)
paste0("row_",1:20)
rownames(df) <- paste0("row_",1:20)
df
names2cols <- function(df) {
nms <- rownames(df)
return(nms)
}
names2cols(df)
View(names2cols)
rm(names2cols)
gc
gc()
names2col <- function(df) {
nms <- rownames(df)
return(nms)
}
names2col <- function(df) {
prv <- df
prv$rnames <- rownames(prv)
return(prv)
}
names2cols(df)
names2col(df)
names2col <- function(df) {
prv <- df
rnames <- data.frame(rnames = rownames(prv))
return(prv)
}
names2col <- function(df) {
prv <- df
rnames <- data.frame(rnames = rownames(prv))
prv <- cbind(rnames, prv)
return(prv)
}
names2col(df)
names2col <- function(df) {
prv <- df
rnames <- data.frame(rnames = rownames(prv))
prv <- cbind(rnames, prv)
rownames(prv) <- NULL
return(prv)
}
names2col(df)
a <- data.frame(a = c(1,2,3), b = c(10,20,30))
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
}
return(pat)
}
fstring("Hola {a$a}")
fstring("Hola {a$a}")
get(a$a)
get(a$a, name)
get(a)
get("a")
get("a$a")
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
print(idxs)
# invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
}
return(pat)
}
get("a$a")
get("a")
fstring("Hola {a$a}")
regmatches("a$a", "$")
regmatches("a$a", gregexpr("$", pat, perl = T))
regmatches("a$a", gregexpr("$", "a$a", perl = T))
gregexpr("(?<=\\{).+?(?=\\})", "hola {a}", perl = T)
gregexpr("(?<=\\{).+?(?=\\})", "hola {a$a}", perl = T)
gregexpr("$", "hola {a$a}", perl = T)
gregexpr("$", "hola {a$a}", perl = T)[[1]]
regmatches("hola {a$a}", gregexpr("$", "hola {a$a}", perl = T)[[1]])
regmatches("hola {a$a}", gregexpr("$", "hola {a$a}", perl = T))[[1]]
regmatches("hola {a$a}", gregexpr("$", "hola {a$a}", perl = T))
regmatches("hola {a$a}", gregexpr("\$", "hola {a$a}", perl = T))
regmatches("hola {a$a}", gregexpr("\\$", "hola {a$a}", perl = T))
stri <- "hola {a$a[1]} {a[1,1]}"
a[1,1]
class(a)
class(a$a[1])
a$a[1]
a[1,2]
regmatches(str, gregexpr("(?<=\\{).+?(?=\\})", str, perl = T))[[1]]
fstring("a\\$a")
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
}
return(pat)
}
fstring("a\\$a")
fstring("{a\\$a}")
get("a\\$a")
get("a$a")
fstring(str)
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
print(idxs)
# invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
}
return(pat)
}
fstring(str)
sstr
str
fstring(stri)
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
grepl("\\$", idxs)
# invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
}
return(pat)
}
fstring(stri)
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
print(grepl("\\$", idxs))
# invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
}
return(pat)
}
fstring(stri)
!1
grepl("[.+]", "a[1,1]")
grepl("\\[.+\\]", "a[1,1]")
grepl("\\[\\.+\\]", "a[1,1]")
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
if (!any(grepl("\\$", idxs))|!grepl("\\[.+\\]", idx)) {
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
} else {
print("Hay objetos complejos")
}
}
return(pat)
}
fstring(stri)
fstring(stri)
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
if (!any(grepl("\\$", idxs))|!grepl("\\[.+\\]", idxs)) {
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
} else {
print("Hay objetos complejos")
}
}
return(pat)
}
fstring(stri)
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
if (!any(grepl("\\$", idxs))|!any(grepl("\\[.+\\]", idxs))) {
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
} else {
print("Hay objetos complejos")
}
}
return(pat)
}
fstring(stri)
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
grepl("\\[.+\\]", idxs)
# if (!any(grepl("\\$", idxs))|!any(grepl("\\[.+\\]", idxs))) {
#    invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
# } else {
#   print("Hay objetos complejos")
# }
}
return(pat)
}
fstring(stri)
fstring <- function(pat, vect = NULL) {
idxs <- regmatches(pat, gregexpr("(?<=\\{).+?(?=\\})", pat, perl = T))[[1]]
if (!is.null(vect)) {
idxs <- as.numeric(idxs)
invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), vect[i], pat) }))
} else {
print(grepl("\\[.+\\]", idxs))
# if (!any(grepl("\\$", idxs))|!any(grepl("\\[.+\\]", idxs))) {
#    invisible(lapply(idxs, function(i) { pat <<- gsub(paste0("\\{",i,"\\}"), get(i), pat) }))
# } else {
#   print("Hay objetos complejos")
# }
}
return(pat)
}
fstring(stri)
xor(c(TRUE, TRUE), c(FALSE, TRUE))
roxygen2::roxygenise()
devtools::install_github("ichangbr/basictools")
