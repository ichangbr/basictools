freeMem <- function(objs){
stopifnot(is.vector(objs) && length(objs) > 0)
rm(list = objs)
gc()
}
a <- c("a")
freeMem(c())
is.vector(c("a","b"))
is.character(c("a","b"))
is.numeric(c("a","b"))
is.numeric(c("a",2))
is.character(c("a",2))
freeMem <- function(objs){
if(!is.vector(objs) && !is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs)
gc()
}
a <- c("a")
freeMem(c())
freeMem(a)
a <- c("a")
freeMem(a)
a <- c("a")
freeMem(a)
a <- c("b")
b <- 23
freeMem(a)
rm(a)
rm(c("b"))
rm(list = c("b"))
a <- c("b")
b <- 23
rm(list = a)
a <- c("b")
b <- 23
freeMem(a)
freeMem(C(1,2))
freeMem(C(1,2,3))
c(1,2)
a <- c(1,2)
freeMem(a)
is.character(a)
!is.vector(a) && !is.character(a)
!is.vector(a)
!is.character(a)
is.vector(a)
is.character(a)
freeMem(a)
freeMem <- function(objs, echo){
if(!is.vector(objs) && !is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs)
gc()
}
a <- c("b")
b <- 23
freeMem(a)
freeMem(c())
freeMem(c(1,2))
freeMem <- function(objs, echo){
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs)
gc()
}
freeMem(c(1,2))
is.logical(T)
is.logical(F)
freeMem(c("a"))
freeMem(c(a))
freeMem <- function(objs, echo = T){
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs)
gc()
}
rm(list=c("a"))
a <- c("b")
rm(list=a)
freeMem <- function(objs, echo = T){
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs)
gc()
}
a <- c("b")
b <- 23
freeMem(a)
freeMem <- function(objs, echo = T){
# if(!is.vector(objs)) stop("objs must be a vector")
# if(!is.character(objs)) stop("objs must be a character vector")
# if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs)
gc()
}
freeMem(objs = c("a"))
freeMem <- function(objs, echo = T){
# if(!is.vector(objs)) stop("objs must be a vector")
# if(!is.character(objs)) stop("objs must be a character vector")
# if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs, envir = .GlobalEnv)
gc()
}
a <- c("b")
b <- 23
freeMem(a)
freeMem <- function(objs, echo = T){
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
rm(list = objs, envir = .GlobalEnv)
gc()
}
a <- c("b")
b <- 23
freeMem(a)
length(T)
freeMem <- function(objs, echo = T){
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
if(!is.logical(echo) | !length(echo) == 1) stop("objs must be logical value")
rm(list = objs, envir = .GlobalEnv)
if(echo) invisible(gc()) else gc()
}
b <- 23
freeMem(objs = c("a", "b"), echo = c("T", "F"))
freeMem(objs = c("a", "b"), echo = T)
freeMem <- function(objs, echo = T){
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
if(!is.logical(echo) | !length(echo) == 1) stop("objs must be logical value")
rm(list = objs, envir = .GlobalEnv)
if(!echo) invisible(gc()) else gc()
}
freeMem(objs = c("a", "b"))
a <- c("b")
b <- 23
freeMem(objs = c("a", "b"))
freeMem <- function(objs, echo = F){
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
if(!is.logical(echo) | !length(echo) == 1) stop("objs must be logical value")
rm(list = objs, envir = .GlobalEnv)
if(!echo) invisible(gc()) else gc()
}
a <- c("b")
b <- 23
freeMem(c("a", "b"))
install.packages("devtools")
library(devtools)
load_all(".")
a <- "hola"
freeMem(c("a"))
install.packages("roxygen2")
roxygenise
library(roxygen2)
roxygenise()
load_all(".")
?freeMem;
help(freeMem)
load_all(".")
freeMem()
load_all(".")
freeMem()
load_all(".")
?lm
?freeMem
R.version()
R.version
R.version.string
install_github("ichangbr/basictools")
library(basictools)
?freeMem
freeMem(c("a"))
library(tidyverse)
setwd("C://Users/ChangI/Desktop/Historical_data/Code/Data_treatment/")
setwd("~/wheatViz/Historic_data/Code/Data_treatment/")
daily_data <- read_csv("../../WP2_1_HistoricData/RawData/Weatherdata_daily.csv")
View(daily_data)
info <- daily_data[,1:4]
data <- daily_data[,5:length(daily_data)]
pattern_list <- unique(str_extract(names(data), ".+(?=_[0-9]{3})")) #Get unique preceding code of name
new_dfs <- list()
for (pat in pattern_list){
new_dfs[[pat]] <- bind_cols(info, data[,grep(paste0("^", pat), names(data))])
}
library(basictools)
freeMem(c("daily_data", "info", "data"))
dfs_wider <- list()
freeMem(c("daily_data", "info", "data", "pat", "pattern"))
daily_data <- read_csv("../../WP2_1_HistoricData/RawData/Weatherdata_daily.csv")
info <- daily_data[,1:4]
data <- daily_data[,5:length(daily_data)]
pattern_list <- unique(str_extract(names(data), ".+(?=_[0-9]{3})")) #Get unique preceding code of name
new_dfs <- list()
for (pat in pattern_list){
new_dfs[[pat]] <- bind_cols(info, data[,grep(paste0("^", pat), names(data))])
}
freeMem(c("daily_data", "info", "data", "pat", "pattern"))
setwd("~/wheatViz/Historic_data/Code/Data_treatment/")
daily_data <- read_csv("../../WP2_1_HistoricData/RawData/Weatherdata_daily.csv")
info <- daily_data[,1:4]
data <- daily_data[,5:length(daily_data)]
pattern_list <- unique(str_extract(names(data), ".+(?=_[0-9]{3})")) #Get unique preceding code of name
new_dfs <- list()
for (pat in pattern_list){
new_dfs[[pat]] <- bind_cols(info, data[,grep(paste0("^", pat), names(data))])
}
freeMem(c("daily_data", "info", "data", "pat", "pattern_list"))
dfs_wider <- list()
for (name in names(new_dfs)){
dfs_wider[[name]] <- new_dfs[[name]] %>% pivot_wider(
names_from = Year, values_from = names(new_dfs[[name]][5:length(new_dfs[[name]])])
)
}
freeMem(c("new_dfs", "name"))
reor_names <- function(txt){
return(paste0(str_split(txt, "_")[[1]][c(1,3,2)], collapse = "_"))
}
for (nm in names(dfs_wider)){
lst_names <- sapply(names(dfs_wider[[nm]])[4:length(names(dfs_wider[[nm]]))], reor_names, USE.NAMES = F)
lst_names <- order(lst_names) + 3
dfs_wider[[nm]] <- dfs_wider[[nm]][c(1,2,3,lst_names)]
}
freeMem(c("lst_names", "nm", "reor_names"))
saveRDS(dfs_wider, "./Res_files/weather_ordered.rds")
saveRDS(dfs_wider, "../../WP2_1_HistoricData/ProcessedData/weather_ordered.rds")
### SET WORKING DIRECTORY
###---
setwd("~/wheatViz/Historic_data/Code/Data_treatment/")
### LOAD DATA
###---
year_data <- readRDS("../../WP2_1_HistoricData/ProcessedData/all_years.rds")
joined_data4year <- list()
for (year in names(year_data)){
joined_data4year[[year]] <- year_data[[year]] %>% bind_rows()
}
all_joined <- joined_data4year %>% bind_rows() %>% type_convert()
joined_data4year <- list()
for (year in names(year_data)){
joined_data4year[[year]] <- year_data[[year]] %>% bind_rows()
}
all_joined <- joined_data4year %>% bind_rows() %>% type_convert()
write_csv(all_joined,"../../WP2_1_HistoricData/ProcessedData/all_joined.csv")
### Set working directory
setwd("~/wheatViz/Historic_data/Code/Data_treatment/")
### Folder with the data
data_folder <- "../../WP2_1_HistoricData/RawData/Genovix_WW_20230412/csv/"
years <- seq(2011,2022)
fpy <- function(year){
path <- paste0(data_folder, year)
filenames <- list.files(path)
files <- list()
for (file in filenames){
name <- str_split(str_split(file, "\\.")[[1]][1], "_")[[1]]
name <- paste(name[name != as.character(year)], collapse = "_")
files[[name]] <- read_delim(paste0(path,"/",file), delim = ";",
col_types = cols(.default = col_character()))
}
return(files)
}
objects <- list()
for (year in years){
print(year)
objects[[as.character(year)]] <- fpy(year)
}
### Set working directory
setwd("~/wheatViz/Historic_data/Code/Data_treatment/")
### Folder with the data
data_folder <- "../../WP2_1_HistoricData/RawData/Genovix_WW_20230412/csv/"
years <- seq(2011,2022)
fpy <- function(year){
path <- paste0(data_folder, year)
filenames <- list.files(path)
files <- list()
for (file in filenames){
name <- str_split(str_split(file, "\\.")[[1]][1], "_")[[1]]
name <- paste(name[name != as.character(year)], collapse = "_")
files[[name]] <- read_delim(paste0(path,"/",file), delim = ";",
col_types = cols(.default = col_character()))
}
return(files)
}
objects <- list()
for (year in years){
print(year)
objects[[as.character(year)]] <- fpy(year)
}
saveRDS(objects, file="../../WP2_1_HistoricData/ProcessedData/all_years.rds")
setwd("~/wheatViz/Historic_data/Code/Data_visualization/")
setwd("~/wheatViz/Historic_data/Code/Data_visualization/")
library(tidyverse)
library(roxygen2)
roxygenise()
roxygenise()
