years <- seq(2011,2022)
fpy <- function(year){
path <- paste0(data_folder, year)
filenames <- list.files(path)
files <- list()
for (file in filenames){
name <- str_split(str_split(file, "\\.")[[1]][1], "_")[[1]]
name <- paste(name[name != as.character(year)], collapse = "_")
files[[name]] <- read_delim(paste0(path,"/",file), delim = ";",
col_types = cols(.default = col_character()))
}
return(files)
}
objects <- list()
for (year in years){
print(year)
objects[[as.character(year)]] <- fpy(year)
}
saveRDS(objects, file="../../WP2_1_HistoricData/ProcessedData/all_years.rds")
setwd("~/wheatViz/Historic_data/Code/Data_visualization/")
setwd("~/wheatViz/Historic_data/Code/Data_visualization/")
library(tidyverse)
library(roxygen2)
roxygenise()
roxygenise()
date()
date("%d.%m.%Y")
format(Sys.Date(), "%d.%m.%Y")
hsplit <- function(df, cnum = 5, multisplit = F) {
len <- length(df)
if (!multisplit) {
df1 <- df[, 1:cnum]
df2 <- df[, cnum:len]
return(list(df1 = df1, df2 = df2))
}
}
prov <- data.frame(a = 1:20, b = 1:20 + 5, c = 1:20)
hsplit(prov, cnum = 2)
hsplit <- function(df, cnum = 5, multisplit = F) {
len <- length(df)
if (!multisplit) {
df1 <- df[, 1:cnum]
df2 <- df[, (cnum+1):len]
return(list(df1 = df1, df2 = df2))
}
}
hsplit(prov, cnum = 2)
hsplit <- function(df, cnum = 5, multisplit = F) {
len <- length(df)
if (!multisplit) {
df1 <- df[, 1:cnum]
df2 <- df[, (cnum+1):len]
return(list(df1 = as.data.frame(df1), df2 = as.data.frame(df2)))
}
}
hsplit(prov, cnum = 2)
hsplit <- function(df, cnum = 5, multisplit = F) {
len <- length(df)
nms <- names(df)
if (!multisplit) {
df1 <- df[, c("a","b")]
df2 <- df[, (cnum+1):len]
return(list(df1 = as.data.frame(df1), df2 = as.data.frame(df2)))
}
}
hsplit(prov, cnum = 2)
hsplit <- function(df, cnum = 5, multisplit = F) {
len <- length(df)
nms <- names(df)
if (!multisplit) {
df1 <- df[, nms[1:cnum]]
df2 <- df[, nms[(cnum+1):len]]
return(list(df1 = as.data.frame(df1), df2 = as.data.frame(df2)))
}
}
hsplit(prov, cnum = 2)
hsplit <- function(df, cnum = 5, multisplit = F) {
len <- length(df)
if (!multisplit) {
df1 <- df[, 1:cnum, drop = F]
df2 <- df[, (cnum+1):drop = F]
# _ ____ ___
# | |___ |==]
# ---
# CREATED: 28.04.2023
# LAST MODIFIED: 28.04.2023
hsplit <- function(df, cnum = 5, multisplit = F) {
len <- length(df)
if (!multisplit) {
df1 <- df[, 1:cnum, drop = F]
df2 <- df[, (cnum+1):len, drop = F]
return(list(df1 = as.data.frame(df1), df2 = as.data.frame(df2)))
}
}
hsplit(prov, cnum = 2)
library(tidyverse)
hsplit(as.tibble(prov), cnum = 2)
hsplit(as_tibble(prov), cnum = 2)
class(as_tibble(prov))
class(prov)
devtools::load_all(".")
hsplit(as_tibble(prov))
hsplit(as_tibble(prov), cnum = 2)
split.default(prov, rep(1:5, each = 3))
seq(1, 21, by = 5)
seq(1, 21, by = 2)
seq(1, 21, by = 5)
seq(1, 22, by = 5)
seq(1, 23, by = 5)
lapply(seq(1,23, by = 5), function(i){i:min(i+4, 23)})
hsplit <- function(df, cnum = 5, multisplit = F) {
len <- length(df)
if (!multisplit) {
df1 <- df[, 1:cnum, drop = F]
df2 <- df[, (cnum+1):len, drop = F]
return(list(df1 = as.data.frame(df1), df2 = as.data.frame(df2)))
} else {
idxs <- lapply(seq(1, len, by = 5), function(i){i:min(i+4, len)})
for (idx_vec in idxs){
print(idx_vec)
}
}
}
devtools::load_all(".")
prov <- cbind(prov, data.frame(d = 1:20, e = 1:20, f = 1:20))
prov
hsplit(prov, 4, multisplit = T)
hsplit <- function(df, cnum = 5, multisplit = F) {
len <- length(df)
if (!multisplit) {
df1 <- df[, 1:cnum, drop = F]
df2 <- df[, (cnum+1):len, drop = F]
return(list(df1 = as.data.frame(df1), df2 = as.data.frame(df2)))
} else {
idxs <- lapply(seq(1, len, by = 5), function(i){i:min(i+4, len)})
for (idx_vec in idxs){
head(df[, idx_vec, drop = F])
}
}
}
devtools::load_all(".")
hsplit(prov, 4, multisplit = T)
devtools::load_all(".")
hsplit(prov, 4, multisplit = T)
hsplit <- function(df, cnum = 5, multisplit = F) {
len <- length(df)
if (!multisplit) {
df1 <- df[, 1:cnum, drop = F]
df2 <- df[, (cnum+1):len, drop = F]
return(list(df1 = as.data.frame(df1), df2 = as.data.frame(df2)))
} else {
idxs <- lapply(seq(1, len, by = 5), function(i){i:min(i+4, len)})
res <- list()
n = 1
for (idx_vec in idxs){
str_name <- paste0("df", n)
res[[str_name]] <- df[, idx_vec, drop = F]
}
return(res)
}
}
devtools::load_all(".")
hsplit(prov, 4, multisplit = T)
devtools::load_all(".")
hsplit(prov, 4, multisplit = T)
freeMem(hsplit())
freeMem(hsplit
)
freeMem(c("hsplit"))
devtools::load_all(".")
hsplit(prov, 4, multisplit = T)
devtools::load_all(".")
hsplit(prov, 4, multisplit = T)
hsplit(as.matrix(prov), 4, multisplit = T)
as.matric(prov)
as.matrix(prov)
as.matrix(prov)[,2, drop = F]
devtools::load_all(".")
hsplit(as.matrix(prov), 4, multisplit = T)
devtools::load_all(".")
hsplit(as.matrix(prov), 4, multisplit = T)
len(as.matrix(df))
length(as.matrix(df))
len(as.matrix(prov))
length(as.matrix(prov))
class(as.matrix(prov))
ncol(as.matrix(prov))
devtools::load_all(".")
hsplit(as.matrix(prov), 4, multisplit = T)
class(as.matrix(prov))
class(as.array(prov))
as.array(prov)
unlist(prov)
as.array(unlist(prov))
as.array(unlist(prov), col = 6)
as.array(unlist(prov), dim = c(20, 6))
as.tibble(prov)
class(as.tibble(prov))
class(prov)
"data.frame" %in% class(prov)
c("data.frame", "tbl_df", "matrix") %in% class(prov)
class(prov) %in% c("data.frame", "tbl_df", "matrix")
class(as.matrix(prov)) %in% c("data.frame", "tbl_df", "matrix")
class(as.tibble(prov)) %in% c("data.frame", "tbl_df", "matrix")
any(class(as.tibble(prov)) %in% c("data.frame", "tbl_df", "matrix"))
devtools::load_all(".")
hsplit(as.matrix(prov), 5, multisplit = F)
hsplit(c(2,5), 5, multisplit = F)
devtools::load_all(".")
hsplit(c(2,5), 5, multisplit = F)
devtools::load_all(".")
hsplit(c(2,5), 5, multisplit = F)
class(5)
class(c(2,5))
length(c(2,5))
length(5)
devtools::load_all(".")
hsplit(prov, 5, multisplit = F)
hsplit(prov, c(2,3), multisplit = F)
hsplit(prov, F, multisplit = F)
class(F)
devtools::load_all(".")
hsplit(prov, F, multisplit = 3)
hsplit(prov, 4, multisplit = 3)
hsplit(prov, 4, multisplit = F)
hsplit(prov, 4, multisplit = F)
devtools::load_all(".")
hsplit(prov, 4, multisplit = F)
library(roxygen2)
roxigenise()
library(roxygen2)
roxygenise()
duplicates(c("a", "a", "b", "c"))
duplicated(c("a", "a", "b", "c"))
outersect <- function(x, y, ...) {
for (i in c(x, y, ...))
}
outersect <- function(x, y, ...) {
for (i in c(x, y, ...)) {
print(i)
}
}
outersect("a", "b","c")
# _ ____ ___
# | |___ |==]
# ---
# CREATED: 28.04.2023
# LAST MODIFIED: 28.04.2023
outersect <- function(...) {
for (i in c(...)) {
print(i)
}
}
outersect("a", "b","c")
is.vector(Ã¤)
is.vector("a")
is.vector(F)
is.vector(list())
is.vector(list(a = 1, b = 2))
x <- data.frame()
is.vector(x)
x <- list()
is.vector(x)
is.list(c("a"))
typeof(x)
x = c("a", "b")
typeof(x)
x = c(2, 1)
typeof(x)
typeof(as.data.frame(x))
typeof(as.tibble(x))
library(tidyverse)
typeof(as.tibble(x))
typeof(as_tibble(x))
typeof(as.matrix(x))
class(as.matrix(x))
class(x)
is.vector(x) || is.list("a")
is.list("a")
is.vector(x) || is.list(x)
is.list("a")
is.list(x)
outersect <- function(...) {
sapply(..., function(i){
(is.vector(i) || is.list(i)) && !is.data.frame(i) && !is.array(i) && !dplyr::is.tbl(i) !is.matrix(i)
outersect <- function(...) {
sapply(..., function(i){
(is.vector(i) || is.list(i)) && !is.data.frame(i) && !is.array(i) && !dplyr::is.tbl(i) && !is.matrix(i)
})
}
outersect("a", "c", T, as.tbl(x))
outersect("a", "c", T, as_tibble(x))
is.tbl(as_tibble(x))
outersect <- function(...) {
sapply(..., function(i){
return((is.vector(i) || is.list(i)) && !is.data.frame(i) && !is.array(i) && !dplyr::is.tbl(i) && !is.matrix(i))
})
}
outersect("a", "c", T, as_tibble(x))
outersect <- function(...) {
lapply(..., function(i){
return((is.vector(i) || is.list(i)) && !is.data.frame(i) && !is.array(i) && !dplyr::is.tbl(i) && !is.matrix(i))
})
}
outersect("a", "c", T, as_tibble(x))
outersect <- function(...) {
lapply(..., function(i){
(is.vector(i) || is.list(i))
})
}
outersect("a", "c", T, as_tibble(x))
outersect <- function(...) {
sapply(..., function(i){
(is.vector(i) || is.list(i))
})
}
outersect("a", "c", T, as_tibble(x))
is.null("a")
is.list("a")
is.list(as_tibble(a = 1:3))
is.list(tibble(a = 1:3))
is.list(matrix(1:20, nrow = 3))
is.list(matrix(1:20, nrow = 4))
is.vector(matrix(1:20, nrow = 4))
is.list(c("a", "b"))
outersect <- function(...) {
for (i in ...){
if (!is.vector(i) || is.list(i) || is.null(i)) stop(paste(i, "is not a vector"))
}
}
outersect("a", "c", T, as_tibble(x))
outersect <- function(...) {
for (i in c(...)){
if (!is.vector(i) || is.list(i) || is.null(i)) stop(paste(i, "is not a vector"))
}
}
outersect("a", "c", T, as_tibble(x))
outersect("a", list(a = 1, b=2))
outersect <- function(...) {
vec <- c(...)
for (i in vec){
if (!is.vector(i) || is.list(i) || is.null(i)) stop(paste(i, "is not a vector"))
}
}
outersect <- function(...) {
vec <- c(...)
print(vec)
for (i in vec){
if (!is.vector(i) || is.list(i) || is.null(i)) stop(paste(i, "is not a vector"))
}
}
outersect("a", list(a = 1, b=2))
class(list(a = 1, b=2))
c("a", 1)
class(c("a", 1))
devtools::install_github("ichangbr/basictools")
a <- matrix(1:10, nrow = 2)
View(a)
is.vector(a)
b <- list(a = 1, b = 2)
is.vector(b)
is.list(b)
is.vector(a)
is.list(a)
c <- letters[1:10]
is.vector(c)
is.list(c)
a <- matrix(1:10, nrow = 2)
b <- list(a = 1, b = 2)
c <- letters[1:10]
prov <- a
is.vector(prov) & !is.list(prov)
is.vector(prov)
prov <- b
is.vector(prov) & !is.list(prov)
prov <- c
is.vector(prov) & !is.list(prov)
d <- data.frame(a = 1:5, b = 1:5)
prov <- d
is.vector(prov) & !is.list(prov)
is.vector(prov) #& !is.list(prov)
outersect <- function(x, y, ...){
for (a in c(x, y, ...)) {
print(a)
}
}
outersect(c(1,2), "a")
outersect <- function(x, y, ...){
for (a in list(x, y, ...)) {
print(a)
}
}
outersect(c(1,2), "a")
outersect(c(1,2), "a", letters[1:10])
outersect <- function(x, y, ...){
print(list(x, y, ...))
# for (a in list(x, y, ...)) {
#   if ((is.vector(a) & !is.list(a))) {}
# }
}
outersect(c(1,2), "a", letters[1:10])
outersect <- function(x, y, ...){
for (a in list(x, y, ...)) {
if ((is.vector(a) & !is.list(a))) {"must be vector"}
}
}
outersect(c(1,2), "a", matrix(letters[1:10], nrow = 2))
outersect <- function(x, y, ...){
for (a in list(x, y, ...)) {
print(a)
# if ((is.vector(a) & !is.list(a))) {"must be vector"}
}
}
outersect(c(1,2), "a", matrix(letters[1:10], nrow = 2))
outersect <- function(x, y, ...){
for (a in list(x, y, ...)) {
if (!(is.vector(a) & !is.list(a))) {"must be vector"}
}
}
outersect(c(1,2), "a", matrix(letters[1:10], nrow = 2))
outersect <- function(x, y, ...){
for (a in list(x, y, ...)) {
if (!(is.vector(a) & !is.list(a))) stop("must be vector")
}
}
outersect(c(1,2), "a", matrix(letters[1:10], nrow = 2))
outersect <- function(x, y, ...){
for (a in list(x, y, ...)) {
if (!(is.vector(a) & !is.list(a))) stop(sprintf("%s must be vector", a))
}
}
outersect(c(1,2), "a", matrix(letters[1:10], nrow = 2))
outersect <- function(x, y, ...){
for (a in list(x, y, ...)) {
if (!(is.vector(a) & !is.list(a))) {
print(a)
stop("must be vector")
}
}
}
outersect(c(1,2), "a", matrix(letters[1:10], nrow = 2))
class(matrix(letters[1:10], nrow = 2))
class(matrix(c(1, 2, 3)))
class(c(1, 2, 3))
str(c(1, 2, 3))
outersect <- function(x, y, ...){
for (a in list(x, y, ...)) {
if (!(is.vector(a) & !is.list(a))) {
stop("variable not vector" )
}
}
res <- c()
for (a in list(x, y, ...)){
print(a)
}
}
outersect(letters[1:15], letters[5:30], letters[10:20])
outersect(letters[1:15], letters[5:25], letters[10:20])
setdiff(letters[1:15])
setdiff(letters[1:15], letters[5:25])
c(setdiff(letters[1:15], letters[5:25]), setdiff(letters[5:25], letters[1:15]))
a <- letters[1:15]
b <- letters[5:25]
c <- letters[10:20]
rnorm(10000)
a <- rnorm(10000)
length(a)
n <- length(a)
x_mean <- mean(a)
x_sd <- sd(a)
x_std <- (a - x_mean)/x_sd
x_std[1:15]
x_sort <- sort(x_std)
a_ <- coef(lm(x_sort ~ seq(1:n)))
w <- (sum(a_ * x_sort)^2)/(sum((x_sort - mean(x_sort))^2))
w[1:10]
a <- 1
b <- 1
c <- 1
ls()
setdiff(ls(), c("a"))
setdiff(c("a"), ls())
freeMem <- function(objs = NULL, exclude = F, echo = F){
if(is.null(objs)){
objs <- ls(envir = .GlobalEnv)
} else if (exclude) {
objs <- setdiff(ls(), objs)
}
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
if(!is.logical(echo) | !length(echo) == 1) stop("objs must be logical value")
rm(list = intersect(objs, ls(envir = .GlobalEnv)), envir = .GlobalEnv)
if(!echo) invisible(gc()) else gc()
}
freeMem <- function(objs = NULL, exclude = F, echo = F){
if(is.null(objs)){
objs <- ls(envir = .GlobalEnv)
} else if (exclude) {
objs <- setdiff(ls(envir = .GlobalEnv), objs)
}
if(!is.vector(objs)) stop("objs must be a vector")
if(!is.character(objs)) stop("objs must be a character vector")
if(!length(objs) > 0) stop("objs must be length 1 or higher")
if(!is.logical(echo) | !length(echo) == 1) stop("objs must be logical value")
rm(list = intersect(objs, ls(envir = .GlobalEnv)), envir = .GlobalEnv)
if(!echo) invisible(gc()) else gc()
}
freeMem(c("a"), T)
freeMem(F, T)
roxygen2::roxygenise()
devtools::install_github("ichangbr/basictools")
